--day4 --- GROUP AND JOIN
-- 6장 -GROUP함수
-- 30,50,60,70Q부서의 사원들의 급여의 전체 합계와 평균급여와 최대급여와 최소급여

SELECT SUM(SALARY) SUMSAL, ROUND(AVG(SALARY),1) AVGSAL, MAX(SALARY) MAXSAL, MIN(SALARY) MINSAL
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (30,50,60,70);

SELECT EMPLOYEE_ID, LAST_NAME, DEPARTMENT_ID, JOB_ID, SALARY
FROM EMPLOYEES
WHERE SALARY=2100 AND DEPARTMENT_ID IN (30,50,60,70);

--SUM, AVG 함수는 숫자 데이타에 대해서만 사용가능
--MIN, MAX함수는 숫자, 문자, 날짜에 대해서 사용가능

--날짜 2000년 < 2020년
SELECT MAX(HIRE_DATE) MAXSAL, MIN(HIRE_DATE) MINSAL
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (30,50,60,70);

-- 문자 A<Z
SELECT MAX(LAST_NAME) MAXSAL, MIN(LAST_NAME) MINSAL
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (30,50,60,70);

-- count:개수새기 null-count X
SELECT COUNT(*)
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN(30,50,60,70);


--GROUP BY 절

SELECT DEPARTMENT_ID, SUM(SALARY) SUMSAL, ROUND(AVG(SALARY),1) AVGSAL, MAX(SALARY) MAXSAL, MIN(SALARY) MINSAL --4
FROM EMPLOYEES --1
WHERE DEPARTMENT_ID IN (30,50,60,70) --2
GROUP BY DEPARTMENT_ID --3
ORDER BY DEPARTMENT_ID ASC; --5

--GROUP BY 2개의 조건
SELECT DEPARTMENT_ID, JOB_ID, EMPLOYEE_ID, SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (30,50,60,70)
ORDER BY DEPARTMENT_ID;

SELECT DEPARTMENT_ID, JOB_ID, SUM(SALARY) SUMSAL, ROUND(AVG(SALARY),1) AVGSAL, MAX(SALARY) MAXSAL, MIN(SALARY) MINSAL --4
FROM EMPLOYEES --1
WHERE DEPARTMENT_ID IN (30,50,60,70) --2
GROUP BY DEPARTMENT_ID, JOB_ID --3
ORDER BY DEPARTMENT_ID ASC; --5

SELECT DEPARTMENT_ID, JOB_ID, COUNT(LAST_NAME) COUNT
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID, JOB_ID
ORDER BY DEPARTMENT_ID;


--HAVING -- 그룹함수의 결과를 조건절에 사요하려면 WHERE절을 사용하면 안된다.
SELECT DEPARTMENT_ID, COUNT(*) RESULT
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (30,50,90) --AND COUNT(*)>5
GROUP BY DEPARTMENT_ID;

SELECT DEPARTMENT_ID, COUNT(*) RESULT --5
FROM EMPLOYEES --1
WHERE DEPARTMENT_ID IN (20,30,50,80,90,100) --2
GROUP BY DEPARTMENT_ID --3
HAVING COUNT(*) > 5 --4
ORDER BY RESULT ASC; --6

SELECT MAX(AVG(SALARY)) AVG_SAL
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
ORDER BY AVG_SAL ASC;


--7장 241P
-- 조인을 사용하여 다중 테이블의 데이터 표시
-- JOIN : 하나 이상의 테이블에서 서로 관련성을 가지고 있는 데이타들을 같이 묶어서 조회할 수 있도록 하는 문법
-- EMPLOYEES TABLE(사원정보), DEPARTMENTS(부서정보) 이 두 개의 테이블간의 연관되는 데이타의 내용이 무엇이 있는지 확인
SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID IN (10,20,30,40) ORDER BY DEPARTMENT_ID;
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID IN (10,20,30,40) ORDER BY DEPARTMENT_ID;
--> DEPARTMENT_ID를 두 개의 테이블이 갖고 있다.
-- 두 테이블의 정보를 하나의 SELECT문으로 조회할 수 있도록!! WHERE에서 연결!

SELECT DEPARTMENTS.DEPARTMENT_NAME, EMPLOYEES.EMPLOYEE_ID, EMPLOYEES.LAST_NAME
FROM DEPARTMENTS, EMPLOYEES
WHERE DEPARTMENTS.DEPARTMENT_ID=20 AND DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID;

--20번 부서의 관리자 사원에 대한 정보를 조회해서 부서데이터와 같이 묶어서 조회
SELECT DEPARTMENTS.DEPARTMENT_ID, DEPARTMENTS.DEPARTMENT_NAME, EMPLOYEES.LAST_NAME
FROM DEPARTMENTS, EMPLOYEES
WHERE DEPARTMENTS.DEPARTMENT_ID=20 AND DEPARTMENTS.MANAGER_ID = EMPLOYEES.EMPLOYEE_ID;

--LOCATION ID(도시번호) 1700,1800에 있는 부서정보
SELECT *
FROM DEPARTMENTS 
WHERE LOCATION_ID IN(1700, 1800);

SELECT * FROM DEPARTMENTS WHERE LOCATION_ID IN(1800,2400);
SELECT * FROM LOCATIONS WHERE LOCATION_ID IN (1800,2400);

SELECT DEPARTMENTS.DEPARTMENT_NAME
FROM DEPARTMENTS, LOCATIONS
WHERE LOCATIONS.LOCATION_ID IN(1800,2400) AND DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID;


-- 1800번 도시에 있는 20번 부서에 근무하고 있는 사원정보도같이 조회
SELECT * FROM LOCATIONS WHERE LOCATION_ID=1800;
SELECT * FROM DEPARTMENTS WHERE LOCATION_ID=1800;
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = 20;

SELECT EMPLOYEES.LAST_NAME, DEPARTMENTS.LOCATION_ID
FROM LOCATIONS, DEPARTMENTS, EMPLOYEES
WHERE LOCATIONS.LOCATION_ID=1800 AND LOCATIONS.LOCATION_ID = DEPARTMENTS.LOCATION_ID 
AND DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID;

SELECT * FROM COUNTRIES;
SELECT * FROM LOCATIONS;


SELECT * FROM DEPARTMENTS;