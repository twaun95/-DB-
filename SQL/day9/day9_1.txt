<<SYS CONNECTION>>
show user  -- sys user는 데이타베이스에 대한 admin user(관리자)
CREATE USER adam IDENTIFIED BY oracle;  -- adam user를 생성 (암호는 oracle로 셋업)
GRANT CREATE SESSION, RESOURCE TO adam;  -- adam user에게 create session권한(db connect할 수 있는 권한), 
                                           -- adam user RESOURCE 권한(테이블과 같은 객체를 만들수 있는 권한)
GRANT UNLIMITED TABLESPACE TO adam;  --  UNLIMITED TABLESPACE 권한은 데이타베이스안의 빈공간을 사용할 수 있다. 
                                       -- 테이블에 데이타를 채울 수 있는 권한 

SELECT TABLE_NAME, OWNER FROM DBA_TABLES WHERE TABLE_NAME IN ('EMPLOYEES', 'TEST');                                    

-- 권한의 종류 
-- 시스템 권한 : 데이타베이스에서 어떤 작업을 할 수 있는가  (EX. CREATE SESSION (데이타베이스에 CONNECT를 할 수 있는 권한))
--               SYS USER가 관리한다.
-- 객체 권한 : 특정 객체(테이블)에 대해서 어떤 작업을 할 수 있는지에 대한 권한 
--               (EX. SELECT ON EMPLOYEES .EMPLOYEES TABLE에 대한 SELECT 할 수 있는 권한)
-- 권한을 DB USER에게 부여하는 작업을 할 때 사용하는 SQL명령이 GRANT 명령을 사용한다.
-- 권한을 DB USER로부터 뺏어오는 작업을 할 때 사용하는 SQL명령이 REVOKE 명령을 사용한다
-- GRANT, REVOKE와 같이 권한을 관리하는 명령들을 DCL(Data Control Language)이라고 한다. 

CREATE ROLE A_ROLE; -- ROLE은 권한들의 집합
GRANT UPDATE, INSERT, SELECT ON HR.EMPLOYEES  TO A_ROLE;
GRANT SELECT ON HR.DEPARTMENTS TO A_ROLE;
GRANT SELECT ON HR.LOCATIONS TO A_ROLE;
GRANT A_ROLE TO ADAM; -- ADAM USER는 A_ROLE이 가지고 있는 권한들을 부여받게 된다.
REVOKE SELECT ON HR.EMPLOYEES FROM A_ROLE;
GRANT SELECT ON HR.EMPLOYEES TO A_ROLE;

<<HR CONNECTION>>
DESC USER_TABLES -- 현재 로그인한 사용자(HR)가 소유하고 있는(CREATE한) 테이블의 정보 조회
                -- 데이타 딕셔너리 뷰 (DATA DICTIONARY VIEW)는 일반 테이블과 같이 컬럼과 레코드(ROW)를 가지고 있다.
SET PAGESIZE 1000
SET LINESIZE 1000
COL READ_ONLY FORMAT A10
ALTER TABLE REGIONS READ ONLY;  -- REGIONS 테이블을 SELECT만 가능한 테이블로 만드는 작업
ALTER TABLE REGIONS READ WRITE;  -- REGIONS 테이블에 대해서 INSERT/UPDATE/DELETE 작업도 할 수 있게 만든다.
SELECT TABLE_NAME, STATUS, READ_ONLY  FROM USER_TABLES;               

SELECT COUNT(*) FROM DICTIONARY; -- 사용할 수 있는 DICTIONARY VIEW가 몇 개나 있는지 조회

DESC USER_TAB_COLUMNS
COL DATA_TYPE FORMAT A10
SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'REGIONS';
SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'DEPARTMENTS';

SELECT * FROM TAB;

GRANT SELECT ON EMPLOYEES TO ADAM; -- ADAM USER에게 HR USER가 소유하고 있는 EMPLOYEES 테이블에 대해 SELECT할 수 있는 권한을 준다.
REVOKE SELECT ON EMPLOYEES FROM ADAM; -- SELECT 권한을 ADAM USER로부터 뺏는다

<<ADAM CONNECTION>>
show user
SELECT * FROM TAB;  (ADAM USER가 현재 소유하고 있는 테이블 조회)
SELECT * FROM HR.EMPLOYEES;

SELECT * FROM USER_TABLES;  -- ADAM USER가 어떤 테이블을 소유하고 있는지 조회
SELECT * FROM ALL_TABLES WHERE TABLE_NAME = 'EMPLOYEES' AND OWNER = 'HR'; -- HR USER가 소유하고 있는 EMPLOYEES테이블을 
                                                                            -- ADAM USER가 사용할 수 있는 권한이 있는지 조회
-- ALL_TABLES의 경우에는 다른 USER가 가지고 있는 테이블이라도 권한을 가지고 있는 테이블 정보를 조회  
CREATE TABLE TEST (ID NUMBER(10), NAME VARCHAR2(20));
SELECT TABLE_NAME FROM USER_TABLES;
SELECT TABLE_NAME, OWNER FROM ALL_TABLES WHERE TABLE_NAME='EMPLOYEES'; -- ALL_TABLES는 ADAM USER가 소유하고 있는 테이블도 조회 가능 
SELECT EMPLOYEE_ID,SALARY FROM HR.EMPLOYEES;
-- ROLE을 통해서 권한을 받았을 경우에는 다시 DB CONNECT를 다시 하거나 SET ROLE명령으로 ROLE안의 있는 권한을 사용할 수 있게 활성화 필요
SET ROLE A_ROLE; -- ROLE을 활성화시킨다. 
SELECT EMPLOYEE_ID,SALARY FROM HR.EMPLOYEES;
SELECT TABLE_NAME, OWNER FROM ALL_TABLES WHERE TABLE_NAME='EMPLOYEES';
SELECT DEPARTMENT_ID,DEPARTMENT_NAME FROM HR.DEPARTMENTS;
SELECT LOCATION_ID,CITY FROM HR.LOCATIONS;

SELECT TABLE_NAME, OWNER FROM DBA_TABLES WHERE TABLE_NAME IN ('EMPLOYEES', 'TEST'); (X) -- DBA로 시작하는 딕셔너리 뷰는 SYS USR만 볼 수 있다


