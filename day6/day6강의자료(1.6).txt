1.  60번 부서의 매니저를 직속상관 매니저로 가지고 있는 사원들의 이름과 소속 부서번호와 소속된 부서이름과 
    직속상관이 속해 있는 부서이름과 직속상관의 사번과 이름(LAST_NAME)을 조회  ( 셀프 조인 이용)

-- 60번 부서의 매니저에 정보 조회
SELECT MANAGER_ID
FROM DEPARTMENTS 
WHERE DEPARTMENT_ID = 60;

-- 103 사원을 매니저로 하고 있는 사원의 정보와 103 사원의 사원 정보를 조회 
SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.DEPARTMENT_ID, E.MANAGER_ID, D.DEPARTMENT_NAME, M.EMPLOYEE_ID "Manager ID",M.LAST_NAME "Name"
FROM EMPLOYEES E, DEPARTMENTS D, EMPLOYEES M
WHERE E.MANAGER_ID = 103 AND E.DEPARTMENT_ID = D.DEPARTMENT_ID AND E.MANAGER_ID = M.EMPLOYEE_ID;

-- ANSI 표준문법 (ON절을 이용하는 조인) 
SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.DEPARTMENT_ID, E.MANAGER_ID, D.DEPARTMENT_NAME, M.EMPLOYEE_ID "Manager ID",M.LAST_NAME "Name"
FROM EMPLOYEES E JOIN DEPARTMENTS D  ON (E.MANAGER_ID = 103 AND E.DEPARTMENT_ID = D.DEPARTMENT_ID)
JOIN EMPLOYEES M  ON (E.MANAGER_ID = M.EMPLOYEE_ID);

-- 103번 사원이 속해 있는 부서이름에 대한 정보  조회
SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.DEPARTMENT_ID, D.DEPARTMENT_NAME
FROM DEPARTMENTS D, EMPLOYEES E 
WHERE E.EMPLOYEE_ID=103 AND E.DEPARTMENT_ID = D.DEPARTMENT_ID; 

2. 부서의 평균 급여가 7000 이상이 되는 부서에 소속이 되어 있는 사원들의 사번과 사원이름과 급여와 부서이름을 조회 
   (GROUP BY절 이용 평균급여 구하고, DEPARTMENTS 테이블과 EMPLOYEES TABLE을 조인해서 조회 (EQU JOIN))

-- 부서 평균 급여가 7000 이상이 되는 부서 정보를 조회
SELECT DEPARTMENT_ID, AVG(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) > 7000;

-- 부서 평균 급여가 7000 이상이 되는 부서에 소속되어 있는 사원들의 정보와 부서이름을 조회
SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.SALARY, D.DEPARTMENT_NAME
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID IN (20,70,80,90,100,110) AND E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- ANSI 표준 문법 (ON절을 이용하는 조인)
SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.SALARY, D.DEPARTMENT_NAME
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON (E.DEPARTMENT_ID IN (20,70,80,90,100,110) AND E.DEPARTMENT_ID = D.DEPARTMENT_ID);

SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.SALARY, D.DEPARTMENT_NAME
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID IN (20,70,80,90,100,110) AND E.DEPARTMENT_ID = D.DEPARTMENT_ID;

SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.SALARY, D.DEPARTMENT_NAME
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
AND E.DEPARTMENT_ID IN (20,70,80,90,100,110);

SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.SALARY, D.DEPARTMENT_NAME
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE E.DEPARTMENT_ID IN (20,70,80,90,100,110);

3. JOB_ID가 'IT_PROG'인 사원들이 받을 수 있는 최소급여와 최대급여 사이의 급여를 받고 있는 
   사원의 이름과 급여정보를 조회 (EMPLOYEES TABLE과 JOBS TABLE을 이용 NON-EQU 조인)

SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.SALARY, J.JOB_ID,J.MIN_SALARY,J.MAX_SALARY
FROM JOBS J, EMPLOYEES E 
WHERE J.JOB_ID = 'IT_PROG' AND E.SALARY BETWEEN J.MIN_SALARY AND J.MAX_SALARY;

SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.SALARY, J.JOB_ID,J.MIN_SALARY,J.MAX_SALARY
FROM JOBS J JOIN EMPLOYEES E 
ON J.JOB_ID = 'IT_PROG' AND E.SALARY BETWEEN J.MIN_SALARY AND J.MAX_SALARY;

4. ON절을 이용하는 조인 방법을 이용해서 입사년도가 2005년보다 늦게 사원들에 대해서 
   사원이름, 급여, 사원이 속해있는 부서이름, 입사일자를 조회. 
   
   ALTER SESSION SET NLS_DATE_FORMAT='YYYY-MM-DD';
   
   SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.HIRE_DATE, D.DEPARTMENT_NAME 
   FROM EMPLOYEES E, DEPARTMENTS D 
   WHERE TO_CHAR(E.HIRE_DATE,'YYYY') >= 2005 AND E.DEPARTMENT_ID = D.DEPARTMENT_ID; 
   
   SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.HIRE_DATE, D.DEPARTMENT_NAME 
   FROM EMPLOYEES E JOIN  DEPARTMENTS D 
   ON TO_CHAR(E.HIRE_DATE,'YYYY') >= 2005 AND E.DEPARTMENT_ID = D.DEPARTMENT_ID; 

-- SELF JOIN (ON절을 이용한 ANSI표준 문법을 사용)
-- employees w 에서는 부하직원 정보를 조회용, employees m 에서는 직속상관 사원의 정보 조회용
SELECT w.last_name, w.hire_date, m.last_name, m.hire_date
FROM employees w JOIN employees m
ON (w.manager_id = m.employee_id)
WHERE w.hire_date < m.hire_date AND w.department_id=60;

SELECT w.last_name, w.hire_date, m.last_name, m.hire_date
FROM employees w JOIN employees m
ON (w.manager_id = m.employee_id and w.hire_date < m.hire_date AND w.department_id=60);

SELECT EMPLOYEE_ID, LAST_NAME, HIRE_DATE, MANAGER_ID 
FROM EMPLOYEES 
WHERE DEPARTMENT_ID=60;

SELECT EMPLOYEE_ID, LAST_NAME, HIRE_DATE, MANAGER_ID 
FROM EMPLOYEES 
WHERE EMPLOYEE_ID IN (102,103);

--  INNER JOIN에는 EQU JOIN, NON EQU JOIN, SELF JOIN이 포함 

-- SUB QUERY 

ALTER SESSION SET NLS_DATE_FORMAT='YYYY-MM-DD';

SELECT EMPLOYEE_ID,LAST_NAME,HIRE_DATE 
FROM EMPLOYEES 
WHERE HIRE_DATE > (SELECT HIRE_DATE FROM EMPLOYEES WHERE LAST_NAME = 'Davies');


-- 60번 부서의 매니저 사원을 매니저로 하고 있는 사원의 정보와 103 사원의 사원 정보를 조회 
SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.DEPARTMENT_ID, E.MANAGER_ID, D.DEPARTMENT_NAME, M.EMPLOYEE_ID "Manager ID",M.LAST_NAME "Name"
FROM EMPLOYEES E, DEPARTMENTS D, EMPLOYEES M
WHERE E.MANAGER_ID = (SELECT MANAGER_ID FROM DEPARTMENTS WHERE DEPARTMENT_ID = 60)
AND E.DEPARTMENT_ID = D.DEPARTMENT_ID AND E.MANAGER_ID = M.EMPLOYEE_ID;

SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.DEPARTMENT_ID, E.MANAGER_ID, D.DEPARTMENT_NAME, M.EMPLOYEE_ID "Manager ID",M.LAST_NAME "Name"
FROM EMPLOYEES E JOIN DEPARTMENTS D  ON (E.MANAGER_ID = (SELECT MANAGER_ID FROM DEPARTMENTS WHERE DEPARTMENT_ID = 60) 
AND E.DEPARTMENT_ID = D.DEPARTMENT_ID)
JOIN EMPLOYEES M  ON (E.MANAGER_ID = M.EMPLOYEE_ID);

-- SINGLE ROW SUBQUERY : SUNQUERY의 결과로 하나의 데이타가 나오는 경우 

-- 전체 사원중에 급여를 제일 많이 받고 있는 사원의 입사일자 보다 더 앞서는 입사일자를 가지고 있는 사원을 조회
SELECT last_name, HIRE_DATE, salary
FROM employees
WHERE HIRE_DATE < (SELECT HIRE_DATE FROM employees WHERE SALARY = (SELECT MAX(SALARY) FROM EMPLOYEES));

-- 60번 부서의 부서평균 급여보다 더 많은 급여를 받고 있는 사원을 조회
SELECT last_name, HIRE_DATE, salary
FROM employees
WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID=60);


-- MULTIPLE ROW SUBQUERY : SUNQUERY의 결과로 여러 개의 데이타가 나오는 경우

SELECT employee_id, last_name, job_id, salary
FROM employees
WHERE salary < ANY (SELECT salary FROM employees WHERE job_id = 'IT_PROG')
AND job_id <> 'IT_PROG';  -- JOB ID가 IT_PROG가 아닌 사원들에 대해서만 조회

SELECT employee_id, last_name, job_id, salary
FROM employees
WHERE salary < ANY (SELECT salary FROM employees WHERE job_id = 'IT_PROG')
AND job_id != 'IT_PROG'; -- JOB ID가 IT_PROG가 아닌 사원들에 대해서만 조회


SELECT employee_id, last_name, job_id, salary
FROM employees
WHERE salary > ANY (SELECT salary FROM employees WHERE job_id = 'IT_PROG')
AND job_id <> 'IT_PROG';

SELECT employee_id, last_name, job_id, salary
FROM employees
WHERE salary = ALL (SELECT salary FROM employees WHERE job_id = 'IT_PROG') (X)
AND job_id <> 'IT_PROG';

SELECT employee_id, last_name, job_id, salary
FROM employees
WHERE salary > ALL (SELECT salary FROM employees WHERE job_id = 'IT_PROG')
AND job_id <> 'IT_PROG';

-- 30번 부서의 최소급여보다 큰 최소급여를 가지고 있는 부서와 부서의 최소급여를 조회

SELECT department_id, MIN(salary)
FROM employees
GROUP BY department_id
order by department_id;

SELECT MIN(salary)
FROM employees
WHERE department_id = 30;


SELECT department_id, MIN(salary)
FROM employees
GROUP BY department_id
HAVING MIN(salary) > (SELECT MIN(salary) FROM employees WHERE department_id = 30)
order by department_id;


SELECT department_id,MIN(salary)
FROM employees
GROUP BY department_id;

SELECT employee_id, last_name
FROM employees
WHERE salary = (SELECT MIN(salary) FROM employees GROUP BY department_id);  (x)

SELECT employee_id, last_name, salary, department_id
FROM employees
WHERE salary = ANY (SELECT MIN(salary) FROM employees GROUP BY department_id); 

-- 부서별 최소급여들 중에 어떤 값보다 많은 급여를 받고 있는 사원 조회
SELECT employee_id, last_name, salary, department_id
FROM employees
WHERE salary > ANY (SELECT MIN(salary) FROM employees GROUP BY department_id); 

-- 부서별 최소급여들 중에 모든 값과 비교해서 더 많은 급여를 받고 있는 사원 조회
SELECT employee_id, last_name, salary, department_id
FROM employees
WHERE salary > ALL (SELECT MIN(salary) FROM employees GROUP BY department_id);

-- 서브쿼리에서 데이타가 안 나오는 경우(NULL)에는 메인쿼리의 결과가 무조건 나오지 못한다.
SELECT last_name, job_id
FROM employees
WHERE job_id = (SELECT job_id FROM employees WHERE last_name = 'Haas');

SELECT last_name, job_id
FROM employees
WHERE job_id = NULL;  (X)

SELECT last_name, job_id
FROM employees
WHERE job_id IS NULL; (O) 

SELECT last_name, job_id
FROM employees
WHERE job_id IS (SELECT job_id FROM employees WHERE last_name = 'Haas'); (X)


-- MULTIPLE COLUMN SUBQUERY 
SELECT min(salary), department_id
FROM employees
WHERE DEPARTMENT_ID IN (30,50,60)
GROUP BY department_id;

-- 쌍비교방식 (PAIRWISE 비교방식)
SELECT EMPLOYEE_ID,salary, department_id FROM EMPLOYEES 
WHERE DEPARTMENT_ID = 60 
AND (SALARY,DEPARTMENT_ID) IN (SELECT min(salary), department_id FROM employees WHERE DEPARTMENT_ID IN (30,50,60) GROUP BY department_id) ;

-- 비쌍비교방식  (NON PAIRWISE 비교방식) 설명 
-- 공유 자료 그림 참조 
-- 쌍비교방식의 SUBQUERY
SELECT EMPLOYEE_ID,DEPARTMENT_ID,JOB_ID
FROM EMPLOYEES 
WHERE (DEPARTMENT_ID,JOB_ID) IN (SELECT DEPARTMENT_ID,JOB_ID FROM EMPLOYEES WHERE DEPARTMENT_ID IN (20,30,40,60));

-- 비쌍비교방식의 SUBQUERY
SELECT EMPLOYEE_ID,DEPARTMENT_ID,JOB_ID
FROM EMPLOYEES 
WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE DEPARTMENT_ID IN (20,30,40,60))
AND JOB_ID IN (SELECT JOB_ID FROM EMPLOYEES WHERE DEPARTMENT_ID IN (20,30,40,60));


-- 사원중에 다른 사원의 매니저가 아닌 사원을 조회
-- SUB QUERY의 결과에 NULL이 포함이 되어 있으면 NOT IN을 이용해서 조건을 체크시 결과 조회되지 않게 된다.
SELECT emp.last_name FROM employees emp
WHERE emp.employee_id NOT IN (SELECT mgr.manager_id FROM employees mgr);

-- 그래서  이런 경우에는 아래의 문장처럼 변경 필요. SUBQUERY에서 NULL은 제외하고 데이타를 조회 그러면 실행결과가 나온다
SELECT emp.last_name FROM employees emp
WHERE emp.employee_id NOT IN (SELECT mgr.manager_id FROM employees mgr WHERE MANAGER_ID IS NOT NULL);

-- 사원중에 다른 사원의 매니저인 사원을 조회
-- IN 비교연산자를 사용하는 경우에는 서브쿼리에 NULL이 포함되어 있어도 상관없다. NULL값은 빼고 비교한다.
SELECT emp.last_name FROM employees emp
WHERE emp.employee_id IN (SELECT mgr.manager_id FROM employees mgr);

DEFINE Enter_name  -- Enter_name 치환변수에 어떤 값이 있는지 확인 
UNDEFINE Enter_name  -- Enter_name 치환변수에 있는 값을 지워주는 작업
-- &가 붙어 있는 있는 변수를 치환변수라고 한다. 
SELECT last_name, hire_date, department_id
FROM employees
WHERE department_id = ANY (SELECT department_id FROM employees WHERE last_name = '&&Enter_name')
AND last_name <> '&Enter_name';

--집합 연산 : SELECT 명령을 통해 만들어진 결과집합과 다른 SELECT문을 통해 만들어진 결과집합에 대해서 실행되는 연산 

SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID, HIRE_DATE FROM EMPLOYEES WHERE EMPLOYEE_ID=176;
SELECT * FROM JOB_HISTORY WHERE EMPLOYEE_ID =176;  -- 176번 사원이 회사내에서 배치 이력 정보 관리 테이블 

-- UNION ALL (합집합)  {1,2,3} UNION ALL {1,2}  => {1,2,3,1,2}
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID=176
UNION ALL
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID FROM JOB_HISTORY WHERE EMPLOYEE_ID=176;

-- UNION (합집합)  {1,2,3} UNION {1,2} => {1,2,3}
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID=176
UNION
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID FROM JOB_HISTORY WHERE EMPLOYEE_ID=176;

-- INTERSECT (교집합)  {1,2,3} INTERSECT {1,2} => {1,2}
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID=176
INTERSECT
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID FROM JOB_HISTORY WHERE EMPLOYEE_ID=176;

-- MINUS (차집합)  {1,2,3} MINUS {1,2} => {3}
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID FROM JOB_HISTORY WHERE EMPLOYEE_ID=176
MINUS
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID=176;

-- 집합연산시 주의사항 
SELECT * FROM JOB_HISTORY WHERE EMPLOYEE_ID=176;

SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID, TO_DATE(NULL) "START DATE", TO_DATE(NULL) "END DATE", HIRE_DATE  FROM EMPLOYEES WHERE EMPLOYEE_ID=176
UNION ALL
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID, START_DATE, END_DATE, TO_DATE(NULL) "Hire Date" FROM JOB_HISTORY WHERE EMPLOYEE_ID=176
-- ORDER BY JOB_ID   (X)
UNION ALL
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID, START_DATE, END_DATE, TO_DATE(NULL) "Hire Date" FROM JOB_HISTORY WHERE EMPLOYEE_ID=101
UNION ALL
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID, TO_DATE(NULL) "START DATE", TO_DATE(NULL) "END DATE", HIRE_DATE  FROM EMPLOYEES WHERE EMPLOYEE_ID=101
ORDER BY JOB_ID DESC;

-- 보통은 집합연산은 위에서 아래로 차례대로 진행하는데 괄호가 있다면 괄호가 있는 부분이 먼저 집합연산이 진행된다.
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID=176
UNION
(SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID FROM JOB_HISTORY WHERE EMPLOYEE_ID=176
MINUS
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID FROM JOB_HISTORY WHERE EMPLOYEE_ID=101)
INTERSECT 
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID FROM JOB_HISTORY WHERE EMPLOYEE_ID=201; 

-- 집합 연산자를 사용했을 경우에는 첫번째 SELECT문에 있는 OREDER BY절에 ALIAS(별칭)을 사용해야 한다.
-- 실행 결과에 나오는 컬럼의 이름도 첫번째 SELECT문의 ALIAS가 나오게 된다.
SELECT EMPLOYEE_ID "EmpId", JOB_ID, DEPARTMENT_ID, TO_DATE(NULL) "START DATE", TO_DATE(NULL) "END DATE", HIRE_DATE  FROM EMPLOYEES 
WHERE EMPLOYEE_ID=176
UNION ALL
SELECT EMPLOYEE_ID "EMPID", JOB_ID, DEPARTMENT_ID, START_DATE, END_DATE, TO_DATE(NULL) "Hire Date" FROM JOB_HISTORY WHERE EMPLOYEE_ID=176
ORDER BY "EmpId"; (O)

SELECT EMPLOYEE_ID "EmpId", JOB_ID, DEPARTMENT_ID, TO_DATE(NULL) "START DATE", TO_DATE(NULL) "END DATE", HIRE_DATE  FROM EMPLOYEES 
WHERE EMPLOYEE_ID=176
UNION ALL
SELECT EMPLOYEE_ID "EMPID", JOB_ID, DEPARTMENT_ID, START_DATE, END_DATE, TO_DATE(NULL) "Hire Date" FROM JOB_HISTORY WHERE EMPLOYEE_ID=176
ORDER BY "EMPID"; (X)

-- UNION ALL을 제외하고 UNION, MINUS, INTERSECT 연산시 SELECT문의 첫번째 컬럼을 기준으로 자동 정렬

SELECT location_id, department_name "Department",TO_CHAR(NULL) "Warehouse location"
FROM departments
UNION
SELECT location_id, TO_CHAR(NULL) "Department",state_province
FROM locations;

SELECT * FROM LOCATIONS WHERE LOCATION_ID=1000;

SELECT employee_id, job_id,salary
FROM employees  WHERE EMPLOYEE_ID = 201
UNION
SELECT employee_id,'NOT FOUND',0
FROM employees  WHERE EMPLOYEE_ID = 202;

-- ORDER BY를 사용하지 않고 ASC(오름차순), DESC(내림차순)  이 아닌 방식으로 데이타순서를 정해서 조회
SELECT employee_id, job_id, department_id
FROM EMPLOYEES
WHERE department_id=50
UNION ALL
SELECT employee_id, job_id, department_id
FROM EMPLOYEES
WHERE department_id=80
UNION ALL
SELECT employee_id, job_id, department_id
FROM EMPLOYEES
WHERE department_id=30;

