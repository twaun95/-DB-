
1. 급여가 회사평균 급여보다 적게 받고 있는 사원을 매니저로 가지고 있는 사원들의 이름과 급여 그리고 부서이름을 조회

SET PAGESIZE 1000

SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.MANAGER_ID, D.DEPARTMENT_NAME
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.MANAGER_ID IN (SELECT EMPLOYEE_ID FROM EMPLOYEES 
                    WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES))
      AND E.DEPARTMENT_ID = D.DEPARTMENT_ID;              

SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.MANAGER_ID, D.DEPARTMENT_NAME
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
AND E.MANAGER_ID IN (SELECT EMPLOYEE_ID FROM EMPLOYEES 
                    WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES));
                    
SELECT SALARY FROM EMPLOYEES WHERE EMPLOYEE_ID=124; 

2. 입사년도가 2007년 이후인 사람들이 소속되어 있는 부서에서 같이 근무하고 있고 입사년도가 2008년 이후에 입사한 사원들의 정보를 
   사원의 이름과 입사일자 그리고 부서 이름을 조회

   SELECT EMPLOYEE_ID, TO_CHAR(HIRE_DATE,'YYYY') YEAR, DEPARTMENT_ID
   FROM EMPLOYEES 
   WHERE TO_CHAR(HIRE_DATE,'YYYY') >= '2007';

COL DEPARTMENT_NAME FORMAT A15 
COL LAST_NAME FORMAT A15
SELECT E.EMPLOYEE_ID, E.LAST_NAME,TO_CHAR(E.HIRE_DATE,'YYYY') YEAR, E.DEPARTMENT_ID, D.DEPARTMENT_NAME
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID 
AND E.DEPARTMENT_ID IN (SELECT DISTINCT DEPARTMENT_ID
                           FROM EMPLOYEES 
                           WHERE TO_CHAR(HIRE_DATE,'YYYY') >= '2007')
AND TO_CHAR(E.HIRE_DATE,'YYYY') >= 2008                           
ORDER BY E.DEPARTMENT_ID;        

3. 'Seattle' city에서 근무하고 있는 사원들의 평균 급여보다 많은 급여를 받고 있고 다른 사원의 매니저 역할을 하고 있는 사원조회

SELECT EMPLOYEE_ID, LAST_NAME, SALARY 
FROM EMPLOYEES
WHERE SALARY > (SELECT AVG(SALARY)
                FROM EMPLOYEES 
                WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID  FROM DEPARTMENTS 
                                         WHERE LOCATION_ID = (SELECT LOCATION_ID FROM LOCATIONS WHERE CITY = 'Seattle')))
AND EMPLOYEE_ID IN (SELECT DISTINCT MANAGER_ID FROM EMPLOYEES);                                        

   
select  employee_id, last_name, salary
from employees
where employee_id in (select m.employee_id
                        from employees e join employees m
                        on e.manager_id = m.employee_id)
    and salary > (select avg(e.salary)
                    from employees e,departments d, locations l
                    where l.city = 'Seattle' and l.location_id=d.location_id and d.department_id = e.department_id);  

4. 사원 중에 현재의 JOB_ID가 과거의 JOB_ID와 같은 사원을 조회 (EMPLOYEES TABLE과 JOB_HISTORY TABLE을 사용) 
SELECT EMPLOYEE_ID, JOB_ID 
FROM EMPLOYEES
INTERSECT
SELECT EMPLOYEE_ID, JOB_ID 
FROM JOB_HISTORY;

-- MULTIPLE COLUMN SUBQUERY
SELECT EMPLOYEE_ID,JOB_ID 
FROM EMPLOYEES 
WHERE (EMPLOYEE_ID,JOB_ID) IN (SELECT EMPLOYEE_ID,JOB_ID FROM JOB_HISTORY); 

SELECT EMPLOYEE_ID,JOB_ID FROM EMPLOYEES WHERE EMPLOYEE_ID IN (176, 200);  
SELECT EMPLOYEE_ID,JOB_ID,START_DATE, END_DATE FROM JOB_HISTORY WHERE EMPLOYEE_ID IN (176, 200);   

5. 회사에 입사한 이후 한 번도 직무나 부서를 변경한 적이 없는 사원을 조회 
   (EMPLOYEES TABLE과 JOB_HISTORY TABLE을 사용,  MINUS 연산 이용)

-- EMPLOYEES TABLE에 있는 부서번호와 JOB_ID 조합값이 JOB_HISTORY에 없는 것을 조회
SELECT DEPARTMENT_ID, JOB_ID FROM EMPLOYEES
MINUS
SELECT DEPARTMENT_ID, JOB_ID FROM JOB_HISTORY;

-- 사원 테이블의 각 사원의 부서번호와 JOB_ID 조합된 값이 JOB_HISTORY에는 없는 사원을 검색 
-- 실제로는 JOB HISTORY TABLE에 사원의 과거 이력이 있다 하더라도 이력정보가 다른 사원의 현재 부서와 JOB_ID의 조합값과 다른 경우에는 
-- 실제 이력정보가 있더라도 조회가 힘들다.

SELECT EMPLOYEE_ID, DEPARTMENT_ID, JOB_ID
FROM EMPLOYEES 
WHERE (DEPARTMENT_ID,JOB_ID) NOT IN (SELECT DEPARTMENT_ID, JOB_ID FROM JOB_HISTORY);

-- 각 사원의 사번이 JOB_HISTORY에 없다는 것은 사원에 대한 이력정보가 없다는 것이기 때문에 
-- 아래의 조회 결과는 문제에서 요구하는 결과와 같이 나오게 된다.
SELECT EMPLOYEE_ID,DEPARTMENT_ID,JOB_ID
FROM EMPLOYEES 
WHERE EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM JOB_HISTORY);
   
SELECT * FROM JOB_HISTORY 
WHERE EMPLOYEE_ID = 202;


SQL문(명령어)의 종류 

QUERY (SELECT)  데이타 조회 SQL
DML (DATA MANIPULATION LANGUAGE(QUERY (SELECT))) 데이타 조작어 
DDL (DATA DEFINITION LANGUAGE) 데이타 정의어 
Transaction Control Language (TCL) 트랜잭션을 관리 SQL 
DCL (DATA CONTROL LANGUAGE) 사용자 권한 관리 SQL 


-- DDL SQL 명령 
-- 데이타베이스 객체를 관리 (생성, 변경, 삭제 작업) 하는 SQL 
-- 데이타베이스 객체에는 여러가지 종류가 있다. 가장 많이 이용하는 객체가 TABLE, INDEX
-- 테이블 생성 방법 
ERD (ENTITY RELATIONSHIP DIAGRAM) 논리적 데이타 모델링 결과물 - 테이블에 대한 1차 설계도 
테이블 다이어그램 (물리적 데이타 모델링 결과물) 테이블  2차 설계도 
데이타베이스 객체는 객체(테이블)에 대한 소유자(관리자)가 되는 유저가 필요하다 

SHOW USER  -- 어떤 데이타베이스 USER로 LOGIN이 되어 있는지 확인 명령 
SELECT * FROM TAB;  -- 현재 로그인한 DB USER(HR)가 소유하는 객체(테이블)의 목록 조회

P :  PRIMARY KEY COLUMN => 테이블 안에 있는 컬럼 들 중에 대표가 되는 컬럼이다.
                        => PRIMARY KEY COLUMN이 되기 위해서는 조건이 있는데 
                           첫번째 조건은 COLUMN안에 들어가는 데이타가 중복이 되면 안된다. (UNIQUE해야 한다)
                           두번째 조건은 NULL이 들어가면 안된다. (COMMISSION_PCT 컬럼의 경우는 PRIMARY KEY COLUMN이 될 수 없다)
F : FOREIGN KEY COLUMN => CHILD TABLE쪽에 만들어지는 컬럼. DEPTNO의 경우는 어떤 사원이 어느 부서에 소속이 되어 있는지에 대한 
                           정보를 보여주는 컬럼 
                           
-- DEPT2 TABLE 생성 
CREATE TABLE  DEPT2  -- DDL 명령
(DEPTNO NUMBER(2),DNAME VARCHAR2(14),LOC VARCHAR2(13));

SELECT * FROM TAB;

-- CONSTRAINT는 제약조건 
ALTER TABLE DEPT2  -- DDL 명령
ADD CONSTRAINT PK_DEPT PRIMARY KEY (DEPTNO);  -- DEPTNO 컬럼을 PRIMARY KEY로 지정하는 작업
-- PK_DEPT 라는 이름의 제약조건을 만들어서 DEPTNO 컬럼에 PRIMARY KEY 설정(지정)한다.
-- 작업의 제약사항들이 걸리게 된다, 예를 들면 DEPTNO 컬럼에는 NULL인 상태가 될 수 없고 중복되는 데이타가 입력될 수 없다 라는 조건이 걸린다.

DESC DEPT2 -- DEPT2 테이블의 컬럼의 구성 확인 

SELECT * FROM DEPT2;
INSERT INTO DEPT2 (DEPTNO, DNAME, LOC)  VALUES (10,'IT','SEOUL');  -- DML
INSERT INTO DEPT2 (DEPTNO, DNAME, LOC)  VALUES (10,'ACCT','BUSAN');(X) -- DEPTNO에 PRIMARY KEY 조건이 걸려 있어서 중복되는 데이타 못 들어온다.
INSERT INTO DEPT2 (DEPTNO, DNAME, LOC)  VALUES (NULL,'ACCT','BUSAN');(X) -- DEPTNO에 PRIMARY KEY 조건이 걸려 있어서 NULL인 상태가 될 수 없다
INSERT INTO DEPT2 (DEPTNO, DNAME, LOC)  VALUES (20,'HR','SEOUL');
INSERT INTO DEPT2 (DEPTNO, DNAME, LOC)  VALUES (30,'PU','BUSAN');
SELECT * FROM DEPT2;

-- NUMBER(7,2) -> 전체 숫자 자릿수는 7자리이고 소숫점 아래의 숫자는 2개까지 가능 (EX. 12345.67)
CREATE TABLE EMP2
(EMPNO  NUMBER(4),ENAME VARCHAR2(10),JOB  VARCHAR2(9),MGR NUMBER(4),HIREDATE DATE,SAL NUMBER(7,2),COMM NUMBER(7,2),DEPTNO NUMBER(2));

ALTER TABLE EMP2 ADD CONSTRAINT EMP2_EMPNO PRIMARY KEY(EMPNO);
SELECT * FROM EMP2;

ALTER TABLE EMP2 DROP CONSTRAINT EMP2_EMPNO;

ALTER TABLE EMP2 ADD CONSTRAINT PK_EMP PRIMARY KEY(EMPNO);

ALTER SESSION SET NLS_DATE_FORMAT='YYYY-MM-DD';

INSERT INTO EMP2 
VALUES (200,'KIM','IT_MGR',NULL,'2005-06-20',8000,NULL,NULL);
SELECT * FROM EMP2;
DESC EMP2

ALTER TABLE EMP2
ADD CONSTRAINT FK_DEPTNO FOREIGN KEY(DEPTNO) REFERENCES DEPT2(DEPTNO);
-- FOREIGN KEY 컬럼이 되면 FOREIGN KEY 컬럼에는 중복되는 데이타가 들어 올수 있고 NULL인 상태도 될 수 있다.

INSERT INTO EMP2 VALUES (201,'LEE','IT_REP',200,'2006-12-20',6000,NULL,10);
INSERT INTO EMP2 VALUES (202,'PARK','HR_REP',203,'2007-10-20',9000,NULL,20);
INSERT INTO EMP2 VALUES (203,'OH','HR_MGR',200,'2010-7-20',10000,NULL,20);
INSERT INTO EMP2 VALUES (204,'NOH','PU_MGR',203,'2012-9-20',12000,0.6,30);
INSERT INTO EMP2 VALUES (205,'SEO','PU_REP',204,'2010-3-20',7000,0.3,30);

SELECT * FROM EMP2;

-- FOREIGN KEY 컬럼이 생성이 되면 FOREIGN KEY COLUMN과 연결되어 있는 부서테이블의 부서정보를 삭제할 때 
-- 삭제하려고 하는 부서의 관련된 사원정보가 사원 테이블에 남아 있는 경우에 부서테이블의 부서정보를 삭제하지 못하게 된다. 
SELECT * FROM DEPT2;
SELECT * FROM EMP2;
DELETE FROM DEPT2 WHERE DEPTNO=30;  -- ERROR가 발생 왜냐하면 사원테이블에 30번 부서에 관련된 사원이 있으므로 삭제 불가

UPDATE EMP2  SET DEPTNO=NULL WHERE DEPTNO=30;  -- 30번 부서의 사원에 대한 부서번호를 NULL로 만든다.
DELETE FROM DEPT2 WHERE DEPTNO=30;  -- 삭제 가능. 왜냐하면 30번부서와 관련된 사원의 부서정보가 다른 값으로 변경이 되었기 때문에
SELECT * FROM DEPT2;
SELECT * FROM EMP2;

INSERT INTO EMP2 VALUES (206,'SIM','PU_REP',203,'2013-4-10',7000,NULL,60);  -- 사원 테이블(FOREIGN KEY가 생성되어 있는 테이블)에
                                                                             -- FOREIGN KEY 컬럼(DEPTNO)에 DEPT2 테이블에 없는 부서를 
                                                                            -- 입력하려고 하는 경우 데이타의 입력 불가능.
INSERT INTO DEPT2 (DEPTNO, DNAME, LOC)  VALUES (30,'PU','BUSAN');
INSERT INTO EMP2 VALUES (206,'SIM','PU_REP',203,'2013-4-10',7000,NULL,30); 
SELECT * FROM DEPT2;
SELECT * FROM EMP2;

UPDATE EMP2 SET DEPTNO=30 WHERE EMPNO IN (204,205);
SELECT * FROM DEPT2;
SELECT * FROM EMP2;

-- CONSTRAINT (제약조건) 종류 
1. PRIMARY KEY
2. FOREIGN KEY
3. UNIQUE
4. NOT NULL
5. CHECK 

-- UNIQUE 제약조건에 대해서 
CREATE TABLE SAMPLEA (NAME VARCHAR2(20) CONSTRAINT SAMPLEA_NAME_UK  UNIQUE); -- NAME 컬럼에 UNIQUE 제약조건이 걸리게 됨.
INSERT INTO SAMPLEA VALUES ('A');
SELECT * FROM SAMPLEA;
INSERT INTO SAMPLEA VALUES ('A'); -- ERROR 왜냐하면 NAME 컬럼에 UNIQUE 제약조건이 만들어져서 중복되는 값이 들어갈 수 없게 되어 있어서 
INSERT INTO SAMPLEA VALUES (NULL);
SELECT NVL(NAME,'NULL') FROM SAMPLEA;  -- NAME 컬럼의 값이 NULL인경우 'NULL'이라고 프린트 해 줘라 

-- NOT NULL 제약조건에 대해서 
CREATE TABLE SAMPLEB (NAME VARCHAR2(20) CONSTRAINT SAMPLEB_NAME_NN  NOT NULL);  -- NAME컬럼에는 NULL이 들어올수 없다 (NULL상태가 될 수 없다)
INSERT INTO SAMPLEB VALUES (NULL); (X)


-- CHECK 제약조건에 대해서 
CREATE TABLE SAMPLEC (NAME VARCHAR2(20),SALARY  NUMBER(10), 
                       CONSTRAINT SAMPLEC_NAME_CK  CHECK (NAME LIKE '%a%'), -- NAME컬럼에는 소문자 a가 반드시 하나이상이 있어야 한다. 
                       CONSTRAINT SAMPLEC_SALARY_CK CHECK (SALARY BETWEEN 1000 AND 5000)); -- SALARY 컬럼에는 1000에서 5000 사이의 숫자만 가능
INSERT INTO SAMPLEC VALUES ('ABC',3000); (X)
INSERT INTO SAMPLEC VALUES ('aBC',3000); (O)
INSERT INTO SAMPLEC VALUES ('aBC',9000); (X)

ALTER TABLE SAMPLEC DROP CONSTRAINT SAMPLEC_NAME_CK;  -- NAME LIKE '%a%' 조건이 더이상 체크되지 않게 된다.
ALTER TABLE SAMPLEC ADD CONSTRAINT SAMPLEC_NAME_CK CHECK (NAME LIKE '%a%'); -- NAME LIKE '%a%' 조건을 다시 추가해서 체크되도록 한다

-- 데이타 딕셔서리 (DATA DICTIONARY)
DESC USER_CONSTRAINTS  -- 데이타 딕셔너리 뷰(테이블과 같은 구조) 를 통해서 어떤 제약조건들이 현재 만들어져 있는지 조회

SET LINESIZE 2000
SELECT * FROM USER_CONSTRAINTS 
WHERE CONSTRAINT_NAME = 'SAMPLEC_NAME_CK';

COL COLUMN_NAME FORMAT A10
SELECT * FROM USER_CONS_COLUMNS 
WHERE CONSTRAINT_NAME = 'SAMPLEC_NAME_CK';

SELECT * FROM USER_CONSTRAINTS 
WHERE CONSTRAINT_NAME = 'PK_EMP';

SELECT * FROM USER_CONS_COLUMNS 
WHERE CONSTRAINT_NAME = 'PK_EMP';  

-- TABLE과 관련된 다른 DDL 명령들 
CREATE TABLE TESTA (ID NUMBER(10));
DESC TESTA

-- TABLE에 COLUMN(컬럼)을 추가하는 작업 
ALTER TABLE TESTA  ADD (NAME VARCHAR2(20), ADDRESS VARCHAR2(30));
DESC TESTA

-- TABLE에 COLUMN의 속성(데이타 타입 혹은 사이즈) 을 변경하는 작업 
ALTER TABLE TESTA MODIFY (NAME VARCHAR2(30));  -- 이미 데이타가 들어가있는 컬럼의 SIZE를 줄일 경우 기존의 저장되어 데이타의 최대크기보다 작게
                                                 -- 줄이는 건 불가능 
DESC TESTA

-- TABLE의 COLUMN의 이름을 변경하고자 할 경우
ALTER TABLE TESTA RENAME COLUMN NAME TO NAME2;
DESC TESTA

-- TABLE의 COLUMN을 삭제하는 명령 
ALTER TABLE TESTA DROP COLUMN NAME2;
DESC TESTA

-- TABLE의 이름을 변경시 
RENAME TESTA TO TESTC;
DESC TESTA
DESC TESTC

-- TABLE을 삭제시 
DROP TABLE TESTC;
DESC TESTC

-- FLASHBACK 명령 
-- 삭제된 테이블을 다시 복원하는 명령 
FLASHBACK TABLE TESTC TO BEFORE DROP;
DESC TESTC







   
   
    