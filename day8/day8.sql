--트랜잭션

SELECT EMPLOYEE_ID, LAST_NAME, SALARY FROM EMPLOYEES
WHERE EMPLOYEE_ID = 200;

UPDATE EMPLOYEES SET SALARY = 5000 WHERE EMPLOYEE_ID = 200;

COMMIT;
CREATE TABLE SAMPLE_TRAN
AS SELECT EMPLOYEE_ID, LAST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES WHERE DEPARTMENT_ID =30;


CREATE TABLE SAMPLE_TRAN2 (ID NUMBER, HIREDATE DATE DEFAULT SYSDATE);
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';
INSERT INTO SAMPLE_TRAN2 VALUES (100, '2015-05-22');
SELECT * FROM SAMPLE_TRAN2;
INSERT INTO SAMPLE_TRAN2 VALUES (100, DEFAULT); -- 생성할 때 지정해놓은 DEFAULT 값으로 입력.
ROLLBACK;

--TRUNCATE
SELECT * FROM SAMPLE_TRAN;
DELETE FROM SAMPLE_TRAN; -- 삭제
SELECT * FROM SAMPLE_TRAN; -- 검색확인- 없어짐
ROLLBACK; --롤백 
SELECT * FROM SAMPLE_TRAN; -- 다시 살아남
TRUNCATE TABLE SAMPLE_TRAN; -- TRUNCATE이용으로 지움
SELECT * FROM SAMPLE_TRAN; --확인 : 없어짐
ROLLBACK;
SELECT * FROM SAMPLE_TRAN; --확인 : ROLLBACK 안됨ㅁ.

SELECT * FROM SAMPLE_TRAN2 FOR UPDATE;
ROLLBACK;

INSERT INTO SAMPLE_TRAN2 VALUES(HI, DEFAULT);
COMMIT;
SELECT * FROM SAMPLE_TRAN2;
INSERT INTO SAMPLE_TRAN2 VALUES(10, DEFAULT);
COMMIT;

1.
SELECT LAST_NAME, SALARY, COMMISSION_PCT
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL
ORDER BY SALARY DESC, COMMISSION_PCT DESC;

2.
SELECT LAST_NAME, JOB_ID, SALARY
FROM EMPLOYEES
WHERE JOB_ID IN('SA_REP', 'ST_CLERK') AND SALARY NOT IN (2500, 3500, 7000);

3.
SELECT LAST_NAME, LENGTH(LAST_NAME)
FROM EMPLOYEES
WHERE LAST_NAME LIKE 'J%' OR LAST_NAME LIKE 'A%' OR LAST_NAME LIKE 'M%';

4. 
SELECT LAST_NAME, TRUNC((SYSDATE-HIRE_DATE)/7) TENURE
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90
ORDER BY TENURE DESC;

5. (DATE 설정)
SELECT LAST_NAME, HIRE_DATE, TO_CHAR(HIRE_DATE, 'DAY') DAY
FROM EMPLOYEES
ORDER BY TO_CHAR(HIRE_DATE -1, 'D'); --'D'는 요일을 사용, -1은 일요일부터시작, -1은 월요일을 나타내기 위함.

6. (CASE 사용)
SELECT LAST_NAME, HIRE_DATE, SYSDATE,
    (CASE WHEN MONTHS_BETWEEN(SYSDATE, HIRE_DATE)/12 > =15 THEN '15 YEARS OF SERVICE'
                WHEN MONTHS_BETWEEN(SYSDATE, HIRE_DATE)/12 > =10 THEN '10 YEARS OF SERVICE'
                WHEN MONTHS_BETWEEN(SYSDATE, HIRE_DATE)/12 > =5 THEN '5 YEARS OF SERVICE'
                ELSE 'MAYBE NEXT YEAR!' END) "AWARDS"
FROM EMPLOYEES;

7. WHERE -> GROUP -> HAVING -> ORDER(GROUP, HAVING)
SELECT MANAGER_ID, MIN(SALARY)
FROM EMPLOYEES
WHERE MANAGER_ID IS NOT NULL
GROUP BY MANAGER_ID
HAVING MIN(SALARY) > 6000
ORDER BY MIN(SALARY) DESC;

8. JOIN
SELECT E.LAST_NAME EMPLOYEE, E.EMPLOYEE_ID EMP#, M.LAST_NAME MANAGER, M.EMPLOYEE_ID MGR#
FROM EMPLOYEES E, EMPLOYEES M
WHERE E.MANAGER_ID = M.EMPLOYEE_ID;

SELECT E.LAST_NAME EMPLOYEE, E.EMPLOYEE_ID EMP#, M.LAST_NAME MANAGER, M.EMPLOYEE_ID MGR#
FROM EMPLOYEES E JOIN EMPLOYEES M
ON E.MANAGER_ID = M.EMPLOYEE_ID;

9. SUBQUERY
SELECT LAST_NAME, JOB_ID, SALARY
FROM EMPLOYEES
WHERE SALARY >ALL (SELECT SALARY FROM EMPLOYEES WHERE JOB_ID = 'SA_MAN')
ORDER BY SALARY DESC;


10. SUBQUERY
SELECT EMPLOYEE_ID, LAST_NAME, SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID =ANY (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE LAST_NAME LIKE '%u%')
AND SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES);
