-- SEQUENCE, SYNONYM 
<< HR CONNECTION >>
-- 1/11 오후 
-- 데이타베이스 객체는 소유자(객체 생성한 DB USER) 가 있다. 데이타베이스 객체를 생성, 변경, 삭제하는 SQL명령이 DDL(CREATE,ALTER,DROP) 
-- 시퀀스 (SEQUENCE) : 데이타베이스 객체이고 
CREATE SEQUENCE EMP_SEQ : INSERT작업시에 숫자를 1번부터 1씩 증가시키면서 자동으로 숫자값을 입력하는 작업
START WITH  1
INCREMENT BY 1;

CREATE TABLE SEQ_TABLE (ID NUMBER(10), NAME VARCHAR2(20));
INSERT INTO SEQ_TABLE(ID,NAME) VALUES(EMP_SEQ.NEXTVAL,'JAMES');
SELECT * FROM SEQ_TABLE;
INSERT INTO SEQ_TABLE(ID,NAME) VALUES(EMP_SEQ.NEXTVAL,'JAMES');
SELECT * FROM SEQ_TABLE;
INSERT INTO SEQ_TABLE(ID,NAME) VALUES(EMP_SEQ.NEXTVAL,'JAMES');
SELECT * FROM SEQ_TABLE;

ALTER SEQUENCE EMP_SEQ 
INCREMENT BY 2;

INSERT INTO SEQ_TABLE(ID,NAME) VALUES(EMP_SEQ.NEXTVAL,'JAMES');
SELECT * FROM SEQ_TABLE;

ALTER SEQUENCE EMP_SEQ 
INCREMENT BY -1;

INSERT INTO SEQ_TABLE(ID,NAME) VALUES(EMP_SEQ.NEXTVAL,'JAMES');
SELECT * FROM SEQ_TABLE;

ALTER SEQUENCE EMP_SEQ 
INCREMENT BY 1
MAXVALUE 6;

INSERT INTO SEQ_TABLE(ID,NAME) VALUES(EMP_SEQ.NEXTVAL,'JAMES');
SELECT * FROM SEQ_TABLE;

INSERT INTO SEQ_TABLE(ID,NAME) VALUES(EMP_SEQ.NEXTVAL,'JAMES');
SELECT * FROM SEQ_TABLE;

INSERT INTO SEQ_TABLE(ID,NAME) VALUES(EMP_SEQ.NEXTVAL,'JAMES');
SELECT * FROM SEQ_TABLE;

SELECT EMP_SEQ.CURRVAL FROM DUAL;

--SEQUENCE 사용시 주의사항 
CREATE SEQUENCE SEQ_DEPT 
START WITH 1 
INCREMENT BY 1;

CREATE TABLE SEQ_TEST1 (ID NUMBER(10));
CREATE TABLE SEQ_TEST2 (ID NUMBER(10));

INSERT INTO SEQ_TEST1 VALUES (SEQ_DEPT.NEXTVAL);
SELECT * FROM SEQ_TEST1;

INSERT INTO SEQ_TEST2 VALUES (SEQ_DEPT.NEXTVAL);
SELECT * FROM SEQ_TEST2;

DROP SEQUENCE SEQ_DEPT;

-- 동의어 (SYNONYM) : 테이블의 본래의 이름외에 다른 이름을 설정하고자 할때 
CREATE SYNONYM EMP_TABLE FOR EMPLOYEES;  -- EMPLOYEES 테이블에 대해 또 다른 이름 생성 
SELECT EMPLOYEE_ID,LAST_NAME FROM EMPLOYEES WHERE EMPLOYEE_ID=200;
SELECT EMPLOYEE_ID,LAST_NAME FROM EMP_TABLE WHERE EMPLOYEE_ID=200;

DROP SYNONYM EMP_TABLE;
SELECT EMPLOYEE_ID,LAST_NAME FROM EMP_TABLE WHERE EMPLOYEE_ID=200;

CREATE PUBLIC SYNONYM EMP_TABLE_PUB FOR HR.EMPLOYEES; -- PUBLIC SYNONYM은 다른 DB USER도 사용할 수 있다.
SELECT EMPLOYEE_ID,LAST_NAME FROM EMP_TABLE_PUB WHERE EMPLOYEE_ID=200;

GRANT SELECT ON HR.EMPLOYEES TO ADAM;


<<ADAM CONNECTION>>
SELECT EMPLOYEE_ID,LAST_NAME FROM HR.EMPLOYEES;
SELECT EMPLOYEE_ID,LAST_NAME FROM EMP_TABLE_PUB;  -- PUBLIC SYNONYM의 이름을 통해 HR.EMPLOYEES 테이블을 조회할 수 있게 된다.


<<SYS CONNECTION>>
GRANT CREATE PUBLIC SYNONYM TO HR;  -- HR USER에게 PUBLIC SYNONYM을 만들 수 있는 권한을 부여 



-- CREATE INDEX
CREATE TABLE TEST_INDEX (ID NUMBER(10));
CREATE INDEX TEST_INDEX_ID_IDX  ON TEST_INDEX(ID);
SELECT TABLE_NAME,INDEX_NAME FROM USER_INDEXES WHERE TABLE_NAME = 'TEST_INDEX';
COL COLUMN_NAME FORMAT A15
SELECT TABLE_NAME,INDEX_NAME,COLUMN_NAME FROM USER_IND_COLUMNS WHERE TABLE_NAME = 'TEST_INDEX';

-- SYNONYM의 정보 조회
CREATE SYNONYM EMP_TABLE FOR EMPLOYEES;
SELECT * FROM USER_SYNONYMS WHERE TABLE_NAME ='EMPLOYEES';


-- SEQUENCE의 정보 조회
SELECT SEQUENCE_NAME FROM USER_SEQUENCES;



-- VIEW (뷰) : 데이타베이스 객체 
-- VIEW는 테이블과 같이 조회 가능, 하지만 VIEW는 실제 데이타를 저장하는 객체가 아니고 
-- SELECT문장을 저장하는 객체이다. 

CREATE OR REPLACE VIEW DEPT_EMP_V
AS SELECT D.DEPARTMENT_NAME, E.EMPLOYEE_ID, E.LAST_NAME, E.DEPARTMENT_ID
   FROM DEPARTMENTS D, EMPLOYEES E
   WHERE D.DEPARTMENT_ID IN (10,20,30) AND D.DEPARTMENT_ID = E.DEPARTMENT_ID;
   
SELECT * FROM DEPT_EMP_V; -- VIEW가 가지고 있는 SELECT문이 실행   
DESC USER_VIEWS
SET LONG 2000
SELECT VIEW_NAME, TEXT FROM USER_VIEWS WHERE VIEW_NAME='DEPT_EMP_V';

DESC DEPT_EMP_V

CREATE OR REPLACE VIEW DEPT_EMP_V
AS SELECT D.DEPARTMENT_NAME DEPTNAME, E.EMPLOYEE_ID EMPID, E.LAST_NAME||','||E.FIRST_NAME NAME, E.DEPARTMENT_ID  DEPTID
   FROM DEPARTMENTS D, EMPLOYEES E
   WHERE D.DEPARTMENT_ID IN (10,20,30) AND D.DEPARTMENT_ID = E.DEPARTMENT_ID;

DESC DEPT_EMP_V
COL NAME FORMAT A20
COL DEPTNAME FORMAT A20
SELECT * FROM DEPT_EMP_V;

-- VIEW의 종류 
-- 1. 단순 뷰 (SIMPLE VIEW) : SELECT절에 컬럼에 대해서 변형을 하지 않고 조회
CREATE TABLE DEPT_T (DEPTID NUMBER(10) CONSTRAINT DEPT_T_DEPTID_PK PRIMARY KEY, DEPTNAME VARCHAR2(20));
CREATE TABLE EMP_T (EMPNO NUMBER(10) CONSTRAINT EMP_T_EMPID_PK PRIMARY KEY,
                     EMPNAME VARCHAR2(20), SALARY NUMBER(10), DEPTNO NUMBER(10),
                     CONSTRAINT EMP_T_DEPTNO_FK FOREIGN KEY(DEPTNO) REFERENCES DEPT_T(DEPTID));

CREATE OR REPLACE VIEW V_DEPT_T AS SELECT * FROM DEPT_T; --(단순 뷰(SIMPLE VIEW),)
SELECT * FROM V_DEPT_T;
DESC V_DEPT_T
-- 단순 뷰의 경우는 뷰를 통해서 테이블에 데이타를 입력,수정,삭제 가능.
INSERT INTO V_DEPT_T VALUES (10,'IT');
SELECT * FROM DEPT_T;
UPDATE V_DEPT_T SET DEPTNAME='PU' WHERE DEPTID=10;
SELECT * FROM DEPT_T;

COL FIRST_LETTER FORMAT A12
-- 복합 뷰의 경우는 뷰를 통해서  테이블에 데이타를 입력,수정,삭제 작업 제한 
CREATE OR REPLACE VIEW V_DEPT_T AS SELECT DEPTID, SUBSTR(DEPTNAME,1,1) FIRST_LETTER FROM DEPT_T; -- 복합뷰(COMPLEX VIEW)
SELECT * FROM V_DEPT_T;
INSERT INTO V_DEPT_T VALUES (20,'HR'); (X)
ALTER  TABLE DEPT_T ADD (ADDR VARCHAR2(20));
DESC DEPT_T
SELECT * FROM DEPT_T;
SELECT * FROM V_DEPT_T;
CREATE OR REPLACE VIEW V_DEPT_T AS SELECT DEPTID, SUBSTR(DEPTNAME,1,1) FIRST_LETTER, ADDR FROM DEPT_T; -- 복합뷰(COMPLEX VIEW)
SELECT * FROM V_DEPT_T;
UPDATE V_DEPT_T SET ADDR='SEOUL' WHERE DEPTID=10; (0)
SELECT * FROM DEPT_T;
SELECT * FROM V_DEPT_T;
UPDATE V_DEPT_T SET FIRST_LETTER = 'O'  WHERE DEPTID=10;  (X)
DELETE FROM V_DEPT_T;  -- VIEW를 통해서 TABLE에 있는 데이타를 지우겠다
SELECT * FROM DEPT_T;

DESC DEPT_T
DESC EMP_T
-- 두 개이상의 테이블을 가지고 조인을 데이타를 조회하는 뷰는 복합뷰라고 한다.
-- 뷰를 통해서  테이블에 데이타를 입력,수정,삭제 작업 제한 
CREATE OR REPLACE VIEW DEPT_EMP_T_V 
AS SELECT DEPT_T.DEPTID, DEPT_T.DEPTNAME, EMP_T.EMPNO, EMP_T.EMPNAME, EMP_T.SALARY, EMP_T.DEPTNO
   FROM DEPT_T, EMP_T 
   WHERE DEPT_T.DEPTID = EMP_T.DEPTNO;

DESC DEPT_EMP_T_V

INSERT INTO DEPT_EMP_T_V 
VALUES (20,'HR',201,'BB',3000,20); (X)

INSERT INTO DEPT_EMP_T_V (DEPTID,DEPTNAME)
VALUES (20,'HR');   (X)

SELECT * FROM DEPT_T;
INSERT INTO DEPT_T VALUES(10,'IT','SEOUL'); (X)
SELECT * FROM DEPT_T;
UPDATE DEPT_EMP_T_V SET DEPTNAME='KK' WHERE DEPTID=10; (X)

-- WITH CHECK OPTION (VIEW OPTION)
SELECT * FROM DEPT_T;
INSERT INTO DEPT_T VALUES(20,'HR','BUSAN');
SELECT * FROM DEPT_T;
DESC EMP_T
INSERT INTO EMP_T VALUES (200,'A',3000,10);
INSERT INTO EMP_T VALUES (201,'B',3000,10);
INSERT INTO EMP_T VALUES (202,'C',3000,20);
INSERT INTO EMP_T VALUES (203,'D',3000,20);
SELECT * FROM EMP_T;

CREATE OR REPLACE VIEW EMP_V_T 
AS SELECT * FROM EMP_T WHERE DEPTNO=20;

SELECT * FROM EMP_V_T;
UPDATE EMP_V_T SET DEPTNO=10 WHERE EMPNO=202; (O)
SELECT * FROM EMP_V_T;
SELECT * FROM EMP_T;

UPDATE EMP_V_T SET DEPTNO=20 WHERE EMPNO=202; (X)
UPDATE EMP_T SET DEPTNO=20 WHERE EMPNO=202;
SELECT * FROM EMP_V_T;
SELECT * FROM EMP_T;

-- WITH CHECK OPTION은 DEPTNO를 뷰를 통해서 다른 값으로 변경이 되지 못하게 하는 OPTION
CREATE OR REPLACE VIEW EMP_V_T 
AS SELECT * FROM EMP_T WHERE DEPTNO=20 WITH CHECK OPTION;
SELECT * FROM EMP_V_T;
SELECT * FROM EMP_T;
UPDATE EMP_V_T SET DEPTNO=10 WHERE EMPNO=202; (X)
